module exp_unit(
    input  logic signed [FXP_N:0] x_in,
    output logic signed [FXP_N:0] y_out
);

    logic [2:0] segment_index;            // Segment index (3 bits for 8 segments)
    logic signed [FXP_N:0] slope, intercept, base;
    logic signed [FXP_N:0] x_frac, mult_result;

    // LUT instantiation
    // NOTE THAT THE LUT IS GENERATED BY THE GENERATOR. MAKE SURE THE CURRENT SV FILE IS CORRECTLY GENERATED.
    pwl_exp_lut lut (
        .segment_index(segment_index),
        .slope(slope),
        .intercept(intercept),
        .base(base)
    );

    // Compute segment index from the MSBs of x_in
    always_comb begin
        segment_index = x_in[15:13];      // Top 3 (non-sign) bits determine the segment
    end

    // Compute fractional part within the segment
    always_comb begin
        x_frac = x_in - base;             // Subtract segment base
    end

    // Perform fixed-point multiplication and addition
    // PIPELINE TO MAKE FASTER!
    assign mult_result = (slope * x_frac) >>> FXP_R;  // Fixed-point multiplication
    assign y_out = mult_result + intercept;        // Add intercept to get final output

endmodule
